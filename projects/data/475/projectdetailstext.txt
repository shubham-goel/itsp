<h3>A stepwise procedure to create a working <em><u>Sound Follower Bot</u></em> :</h3><ol>
<li><strong>Learn to use Matlab</strong>:
<ul>
<li>Matlab is a sophisticated programming software with a user friendly interface. We used Matlab R2013a version for accomplishing Digital Signal Processing (DSP). Firstly, we developed a certain level of familiarity with the basic programming environment offered by Matlab.</li><li>We learnt how to read sound files into arrays (digitalized matrix of .wav files). Once we have the array form, all sorts of DSP can be performed like applying frequency filters, introducing echo, etc. and the modified array can be written back to a sound file.</li><li>The concept of sampling rate and its implications were understood. Sampling Rate is the frequency at which the intensity level is marked against the sampling number. We have used sampling frequency of 192000 Hz, which is a pretty high value. This reduces the error level considering the sensitivity of our experiment.</li></ul></li><li class="redactor-replaced"><strong>Obtain input from a mic:</strong>
<ul>
<li class="redactor-replaced">Matlab identifies the recording device and assigns it a device ID. A default device is assigned -1 value.</li><li class="redactor-replaced">Connect the mic in the audio input jack of your laptop.</li><li class="redactor-replaced">Create an audio recording object using the <span style="font-family: Monospace;">audiorecorder</span> command*. (NOTE: AT ANY POINT IF YOU ARE NOT SURE OF THE USE OF A COMMAND OR ITS ARGUEMENTS PLEASE USE THE <span style="font-family: Monospace;">help</span> COMMAND OR MATLAB DOCUMENTATION CENTER.)</li><li class="redactor-replaced">Use record or recordblocking for using the mic to fill the new audio recording object. Use getaudiodata to retrieve information from the object and store it into an array. Now the input may be mono (one channel) or stereo (two channel) depending upon what argument was given to the recording object and whether your hardware (mic and jack) are supportive of it.</li><li class="redactor-replaced">You may plot (<span style="font-family: Monospace;">plot</span>) or listen to (<span style="font-family: Monospace;">soundsc</span>) the recorded array. 
<ol><li class="redactor-replaced"><span style="font-family: Monospace;">%code support</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">rec1 = audiorecorder(192000,16,1,-1);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">recordblocking(rec1,3);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">rec1data  =  getaudiodata(rec1);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">plot(rec1);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">soundsc(rec1,192000);</span></li></ol></li></ul></li><li class="redactor-replaced"><strong>Obtain inputs from two mics simultaneously:</strong><ul><li class="redactor-replaced">Generally, the laptops have a stereo audio input jack. Connect the two channels of a stereo male audio jack to two mono type mics through female jacks (All jacks are 2.5mm type). Ground the respective terminals. You now have a stereo device with two mics as its channels. They record simultaneously.</li><li class="redactor-replaced">Separate the channels into two arrays using column wise indexing of the two column array of stereo recording object.
<ol><li class="redactor-replaced"><span style="font-family: Monospace;">%code support</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">rec1 = audiorecorder(192000,16,2,-1);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">recordblocking(rec1,3);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">rec1data  =  getaudiodata(rec1);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">recleft  = rec1data(:,1);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">recright = rec1data(:,1) %</span>'recleft' and 'recright' are the arrays which have to be cross correlated to obtain delay in arrival of signals at the two mics.</li></ol></li></ul></li><li class="redactor-replaced"><strong>Peform cross-correlation and obtain time delay and angle of arrival:</strong><ul><li class="redactor-replaced">Use finddelay(x1,x2) command to obtain delay in no. of samplings. Divide this delay by sampling rate to get time difference of arrival. Convert this to angle of incidence by using the parallel wave approximation.
<ol><li class="redactor-replaced"><span style="font-family: Monospace;">%code support</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">D = finddelay(recleft,recright);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">delt = D/192000</span></li><li class="redactor-replaced"><span style="color: rgb(127, 127, 127); font-family: Monospace;">c = 350;  %speed of sound</span></li><li class="redactor-replaced"><span style="color: rgb(127, 127, 127); font-family: Monospace;">d = 0.10; %separation between mics</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">value = c*delt/d;</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">theta = asin(value);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">angle = theta*180/pi</span></li></ol></li></ul></li><li class="redactor-replaced"><span style="font-family: Arial;"><strong>Control Arduino Uno from Matlab scripts:</strong></span><ul><li class="redactor-replaced"><span style="font-family: Arial;"></span>Upload the adeios.pde program from the arduino IDE onto the board through the USB serial communication port. This is a one time step unless you upload any other file onto the board.</li><li class="redactor-replaced">Add the necessary folders of <em>Arduino IO Package </em>to the Matlab search path.</li><li class="redactor-replaced">Learn to control Arduino pins. <span style="font-family: Monospace;">digitalWrite, analogWrite, servoWrite, pinMode </span>are useful commands.
<ol><li class="redactor-replaced"><span style="font-family: Monospace;">a = arduino('COM#');  % #is the com port of arduino board</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">a.pinMode(13,'OUTPUT');</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">a.servoAttach(9);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">a.digitalWrite(13,1);</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">a.servoWrite(9,90+floor(angle));</span></li><li class="redactor-replaced"><span style="font-family: Monospace;">a.digitalWrite(13,0);</span></li></ol></li></ul></li></ol><p class="redactor-replaced" style="margin-left: 20px;"><span style="font-family: Monospace;"></span>The above code shows the intended use of commands from Matlab issued to control Arduino board. Similarly the laser mounted on the servo can be controlled to switch on when the appropriate angle is written on the motor.</p><p><span style="font-family: Monospace;"></span></p><p><span style="font-family: Monospace;">
</span></p>