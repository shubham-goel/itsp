<ul>
<li><strong><span style="color: rgb(23, 54, 93);"> The CascadeObject Detector function of computervision toolbox in MATLAB</span></strong>:</li></ul><p>   <strong><em>        DESCRIPTION</em></strong>: The cascade object detector uses the Viola-Jones algorithm to detect people's faces, noses, eyes, mouth, or upper body. </p><p><strong><em>    CONSTRUCTION </em></strong>: <tt>detector = vision.CascadeObjectDetector</tt> creates a System object, <tt>detector</tt>, that detects objects using the Viola-Jones algorithm. The             <tt>ClassificationModel</tt> property controls the type of object to detect. By default, the detector is configured to detect faces.    </p><p><tt>detector = vision.CascadeObjectDetector(MODEL)</tt> creates a System object, <tt>detector</tt>, configured to detect objects defined by the input string, <tt>MODEL</tt>. The <tt>MODEL</tt> input describes the type of object to detect. There are several valid <tt>MODEL</tt> strings, such as '<tt>FrontalFaceCART</tt>', '<tt>UpperBody</tt>', and '<tt>ProfileFace</tt>'.  <tt>detector = vision.CascadeObjectDetector(XMLFILE)</tt> creates a System object, <tt>detector</tt>, and configures it to use the custom classification model specified with the <tt>XMLFILE</tt> input. The <tt>XMLFILE</tt> can be created using the<a href="http://www.mathworks.in/help/vision/ref/traincascadeobjectdetector.html"><tt>trainCascadeObjectDetector</tt></a> function or OpenCV (Open Source Computer Vision) training functionality. You must specify a full or relative path to the <tt>XMLFILE</tt>, if it is not on the MATLAB<sup>Â®</sup> path.  <tt>detector = vision.CascadeObjectDetector(<em><tt>Name</tt></em>,<em><tt>Value</tt></em>)</tt> configures the cascade object detector object properties. You specify these properties as one or more name-value pair arguments. Unspecified properties have default values.</p><p><img src="http://www.mathworks.in/help/examples/vision/DetectFacesFrontalFaceClassificationModExample_01.png"></p><ul><li><span style="color: rgb(31, 73, 125);"><strong>Image Erosion</strong></span><strong>:  </strong>Erosion shrinks the boundary of a binary image to be smaller.  Usually the shrinkage or growth is by one pixel, but greater changes are possible with the recipe provided by the structuring element. </li></ul><p>         Erosion rule: replace the central point of the mask M with the smallest value of SMALLEST covered by the mask. Assuming I is a binary image, then the mask centered at the                          boundary of I will output zero because the mask overlaps both 0s (outside boundary) and 1s (inside boundary).Examples of eroded objects are given in Figure below for</p><p>         different structuring elements.</p><ul><li>                                                                                                                                              <img src="http://utam.gg.utah.edu/tomo03/03_mid/HTML/img535.png"><p>                                                                     (Left) Structuring element, (middle) object, and (right) eroded object. </p><p>                                                             In this example, a filled (open) circle corresponds to an intensity value of 1 (0)</p><p>Large structuring elements tend to smooth boundary features, small ones tend to preserve boundary shape, and shaped structuring elements preserve similar appearing features in the boundary.</p><p>EXAMPLES:</p><p> Erode a binary image with a disk structuring element.</p><pre>originalBW = imread('circles.png');  
se = strel('disk',11);        
erodedBW = imerode(originalBW,se);
imshow(originalBW), figure, imshow(erodedBW)
</pre>
</li></ul><p><img src="http://www.mathworks.in/help/images/ref/referenceipart18.gif"></p><p><strong>      </strong></p><p><strong>       </strong>Erode a grayscale image with a rolling ball.</p><pre>originalI = imread('cameraman.tif');
se = strel('ball',5,5);
erodedI = imerode(originalI,se);
figure, imshow(originalI), figure, imshow(erodedI)</pre><p><img src="http://www.mathworks.in/help/images/ref/referenceipart128.gif"></p>