<p><strong>Arduino UNO:</strong></p><p>The
Arduino Uno is a microcontroller board based on the ATmega328. It has 14
digital input/output pins (of which 6 can be used as PWM outputs), 6 analog
inputs, a 16 MHz ceramic resonator, a USB connection, a power jack, an ICSP
header, and a reset button.</p><p><strong>Features of Arduino UNO board</strong></p><ul>
<li>1.Microcontroller - ATmega328</li><li>2.Operating Voltage - 5V</li><li>3.Input Voltage (recommended) - 7-12V</li><li>4.Input Voltage (limits) - 6-20V</li><li>5.Digital I/O Pins - 14 (of which 6 provide PWM output)</li><li>6.Analog Input Pins - 6</li><li>7.DC Current per I/O Pin - 40 mA</li><li>8.DC Current for 3.3V Pin - 50 mA</li><li>9.Flash Memory - 32 KB (ATmega328) of which 0.5 KB used by
bootloader</li><li>10.SRAM - 2 KB (ATmega328)</li><li>11.EEPROM - 1 KB (ATmega328)</li></ul><p>12. Clock Speed - 16 MHz</p><p><strong></strong></p><p><strong></strong></p><p>The
power pins are as follows:</p><p>• <strong>VIN. </strong>The input voltage to the Arduino board when
it's using an external power source (as opposed to 5 volts from the USB
connection or other regulated power source). You can supply voltage through
this pin, or, if supplying voltage via the power jack, access it through this
pin.</p><p>• <strong>5V.</strong>This pin outputs a regulated 5V from the
regulator on the board. The board can be supplied with power either from the DC
power jack (7 - 12V), the USB connector (5V), or the VIN pin of the board
(7-12V).</p><p>• <strong>3.3V. </strong>A 3.3 volt supply generated by the on-board
regulator. Maximum current draw is 50mA.</p><p>• <strong>GND. </strong>Ground pins.</p><p>Each of the 14 digital pins (pins 0 to 13) on the Uno can be used
as an input or output, using pinMode(), digitalWrite(), and digitalRead()
functions. They operate at 5
volts. Each pin can provide or receive a maximum of 40 mA and has an internal
pull-up resistor (disconnected by default) of 20-50 kOhms. In addition, some
pins have specialized functions:</p><p>• <strong>Serial: 0 (RX) and 1 (TX). </strong>Used to receive (RX) and transmit (TX) TTL serial
data. These pins are connected to the corresponding pins of the ATmega8U2
USB-to-TTL Serial chip.</p><p>• <strong>External Interrupts: 2 and 3. </strong>These pins can be configured to trigger an interrupt
on a low value, a rising or falling edge, or a change in value.</p><p>• <strong>PWM: 3, 5, 6, 9, 10, and 11. </strong>Provide 8-bit PWM output with the analogWrite() function.</p><p>• <strong>SPI: 10 (SS), 11 (MOSI), 12
(MISO), 13 (SCK). </strong>These pins support SPI communication
using the SPI library.</p><p>• <strong>LED: 13. </strong>There is a built-in LED connected to digital pin 13.
When the pin is HIGH value, the LED is on, when the pin is LOW, it's off.</p><p>The Uno has 6 analog inputs, labeled A0 through A5, each of which
provide 10 bits of resolution (i.e. 1024 different values). By default they
measure from ground to 5 volts, though is it possible to change the upper end
of their range using the AREF pin and the analogReference() function. Additionally, some pins have specialized
functionality:</p><p>• <strong>TWI: A4 or SDA pin and A5 or SCL
pin. </strong>Support TWI communication using
the Wire library.</p><p>There
are also different Arduino shields:</p><p>•
LEDs and switches shield</p><p>•
LCD and sensors shield</p><p>•
Audio shield</p><p>•
Triac shield</p><p>•
Motor shield</p><p>•
ADC/DAC shield</p><p>•
Bluetooth shield</p><p>•
ZigBee shield</p><p>That
will sit on the Arduino Uno. Each shield will cater to one or more experiments.
The Uno board will be USB powered.</p><p><strong>ULTRASONIC SENSOR</strong></p><p>An
ultrasonic sensor is a device that works in much same way as RADAR and SONAR.
Ultrasonic sensors broadcast a powerful, ultrasonic frequency, then detect the
ultrasonic sound waves as they bounce off of objects and return to the sensor.</p><p>Ultrasonic
sensors depend on two separate devices: an ultrasonic transducer and a
detector. An ultrasonic transducer is any device that converts energy into an
ultrasonic frequency. Ultrasonic transducers are usually made from
piezoelectric crystals that can change size when a voltage is applied to them.
When an alternating current is applied to a piezoelectric crystal, it vibrates
extremely fast and produces an ultrasonic sound wave. The detector is also made
of a piezoelectric crystal, but produces a voltage when an ultrasonic frequency
comes in contact with it, effectively producing the opposite results. A sensor
calculates the time that it takes in between broadcasting the ultrasonic
frequency and receiving the incoming waves.</p><p><strong>Features
of Ultrasonic module HC – SR04:</strong></p><p>Ultrasonic ranging module HC -
SR04 provides 2cm - 400cm non-contact measurement function, the ranging accuracy
can reach to 3mm. The modules includes ultrasonic transmitters, receiver and
control circuit. The basic principle of work:</p><p>(1) Using IO trigger for at least
10us high level signal,</p><p>(2) The Module automatically
sends eight 40 kHz and detect whether there is a pulse signal back.</p><p>(3) IF the signal back, through
high level, time of high output IO duration is the time from sending ultrasonic
to returning.</p><p>Test distance = (high level
time×velocity of sound (340m/s) / 2,</p><p> <strong>Wire connecting
direct as following:</strong></p><p>5V - Supply<strong></strong></p><p>Trigger - Pulse Input</p><p>Echo - Pulse Output</p><p>0V - Ground</p><p><strong>Electric
Parameter</strong></p><ul>
<li>1.Working Voltage - DC 5 V</li><li>2.Working Current - 15mA</li><li>3.Working Frequency - 40Hz</li><li>4.Max Range - 4m</li><li>5.Min Range -  2cm</li><li>6.MeasuringAngle - 15 degree</li><li>7.Trigger Input Signal0 - 10uS TTL pulse</li><li>8.Echo Output Signal Input TTL lever signal and the range in proportion</li><li>9.Dimension - 45*20*15mm</li></ul><p><strong>Timing diagram</strong></p><p>The Timing diagram is shown
below. You only need to supply a short 10uS pulse to the trigger input to start
the ranging, and then the module will send out an 8 cycle burst of ultrasound
at 40 kHz and raise its echo. The Echo is a distance object that is pulse width
and the range in proportion .You can calculate the range through the time
interval between sending trigger signal and receiving echo signal. Formula: uS
/ 58 = centimeters or uS / 148 =inch; or: the range = high level time *
velocity (340M/S) / 2; we suggest to use over 60ms measurement cycle, in order
to prevent trigger signal to the echo signal.</p><p><strong>AUDIO SAMPLING</strong></p><p>Audio
sampling is required for the voice feedback of the stored audio samples from
the flash memory of the SD card connected to the Arduino Uno.</p><p>Pre-Requisites:</p><p>You’ll
need:</p><p>• An
Arduino Uno</p><p>• An earphone with wires soldered to it.</p><p>•
The Arduino software, version 0022, 0023 or 1.0</p><p><strong>Explanation:</strong></p><p>The
audio playback works using two of the Arduino board’s timers, hardware
functionality of the AVR (ATmega328) microcontroller that’s normally used to
generate PWM output with the analogWrite() function. One timer is used to
generate a high-frequency square wave whose duty cycle corresponds to a
particular value (amplitude) in the audio sample. Another timer is used to
update this duty cycle at 8 KHz, the sample rate of the audio. </p><p><em>Download and Install the TMRpcm Library for Arduino</em></p><p><em><br></em></p><h3><strong>Features</strong></h3><ul>
<li>PCM/WAV playback direct from SD card
</li><li>Main formats: WAV files, 8-bit, 8-32khz Sample Rate, mono.
</li><li>Asynchronous Playback: Allows code in main loop to run while audio playback occurs.
</li><li>Single timer operation: TIMER1 (Uno,Mega) or TIMER3,4 or 5 (Mega)</li><li>Complimentary output or dual speakers
</li><li>2x Oversampling
</li><li>Supported devices: Arduino Uno, Nano, Mega, etc.
</li><li>More! See the <a href="https://github.com/TMRh20/TMRpcm/wiki/Advanced-Features">Advanced Features wiki page</a> for additional features</li></ul><p><strong>Library Functions:</strong></p><p>The
library only has two functions: startPlayback() and stopPlayback(). The first
takes two arguments: the array of audio samples and its length. For example:
startPlayback(sample, sizeof(sample));</p><p>The
stopPlayback() function doesn’t take any arguments and will stop playback of
the current sample.</p><p>Note
that the example also uses a couple of unusual Arduino constructions. First,
the sample[] array is declared using the keyword PROGMEM, which causes the data
to be stored in the Arduino’s program memory (Flash) instead of its RAM (which
is much smaller). It also uses the sizeof() function, which returns the number
of bytes used by an array.</p><p><strong>Encode Your Own Audio Sample:</strong></p><p>To
encode your own audio samples, you’ll first need to down-sample the audio to 16 KHz, 8-bit mono sound, and then convert it to a series of numbers that can be
pasted into your Arduino program.</p><p>One
easy way to down-sample the audio is with iTunes. First, Import your original
sample into iTunes. Then open the preferences dialog and, on the general tab,
click “Import Settings…”.</p><p>From
there, select “Custom” from the “Setting” drop-down. Inside the custom
settings, select  a “Sample Rate” of 16 KHz, a "Sample Size" of 8-bit and
Mono “Channels”.</p><p>Now
you can right-click on your audio file in the iTunes list and select “Create WAV version”. (This should work even if the original file is already an mp3).
You’ll end up with a new, 16 KHz, wav file. Listen to it to get an idea of the
audio quality you can expect when playing the sample from the Arduino board.</p><p>Unzip
and run the application after downloading. It should prompt you for an audio
file to encode. Select the new mp3 file you created with iTunes (you can locate
it by right-clicking it within iTunes and selecting “Show in Finder”). The
EncodeAudio application will convert it to numeric values and then copy them to
the clipboard. It may take a few seconds. A dialog will appear notifying you
whether or not the encoding was successful.</p><p>Now,
go into the playback example in Arduino and delete the current line of numbers
in the sample array. Paste the new numbers copied to the clipboard by the
EncodeAudio program. Then you should be able to upload your new program and
hear your own audio file. </p><p>If
you get a warning that your sketch is too big for the Arduino board, delete
some of the numbers from the end of the sample array.</p>