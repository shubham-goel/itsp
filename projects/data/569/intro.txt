<h3><strong>The goal of this project is to design and build a bicycle prototype that is capable of driving (controlled by us)and balancing without a rider. The self-stabilizing bicycle will employ a control system to keep itself from falling over while in motion, and be propelled by a motor. The requirements include that the bicycle should be capable of accelerating, driving in a straight line, and stopping without falling.</strong></h3><h3>
</h3><h4></h4><h4></h4><h4><strong><br></strong></h4><h4><strong>For balancing the bot , we have different mechanisms .</strong></h4><h4></h4><h4></h4><h4>1. <strong>Using flywheel.</strong></h4><h4>The bicycle can balance even in a stationary position.The mathematical model of 
this system is the least complex of the considered designs. As a result of the 
relative math simplicity and the ease of starting and stopping, the controller would be relatively straightforward to implement. This design would also allow the 
bicycle to travel in a relatively straight line with only small deviations. One of the main disadvantages of this design is that it does not likely permit easy 
steering, especially for higher speeds, considering that the PID gains will be 
optimized for straight line travel. Also, the frame would have to be
altered, causing the design to look less similar to a bicycle than others.</h4><h4>To balance the cycle we have to measure the tilt angle from the vertical and move 
flywheel attached to the two-wheeler according to it using PID control.</h4><h4></h4><h4></h4><h4>2.<strong> Using gyroscope.</strong></h4><h4>There will be gyroscope whose axis is parallel to the wheel axes . When the bicycle is balanced, the gyroscope rotates at a constant speed in the same direction as 
the bicycle wheels for added stability. When the bicycle begins to lean to one side, the frame containing the gyroscope pivots (about the vertical axis) to cause a 
gyroscopic effect of reactionary torque on the bicycle, rotating it back upright. 
As the gyroscope pivots, the angular momentum acting on the bike changes. A change in angular momentum of a system is equivalent to a torque acting on that system. 
However, this design would still likely have the greatest power requirement because it requires the highest number of motors (four), consequently increasing the cost: in addition to propulsion, one motor is required for each maintaining the 
gyroscope wheel and turning the gyroscope, as well as a servo motor for steering.</h4><h4></h4><h4></h4><h4>3. <strong>Using steering.</strong></h4><h4>When the bicycle begins to lean to one side, the handlebars, and thus the front 
wheel, are rotated to rebalance the bicycle. The path of the bicycle (i.e. turning) as well as steering to balance would be controlled by the same processor. Higher 
gains would be given for the balancing process, but eventually, the bicycle would 
veer in the desired direction.The steering design has the advantage of being the 
least physically complex of all the designs because it requires fewer motors (other than propulsion, only one motor is used to steer the front wheel). Additionally, 
this design best resembles an actual bicycle. However, the reaction time to correct the lean angle of the bicycle must be very quick, which could be difficult to obtain with the Arduino that will be used.</h4><h4></h4><h4></h4><h4>4. <strong style="color: inherit; font-family: inherit; font-style: inherit; font-variant: inherit;">Using Weight rail mechanism .</strong></h4><h4>Balancing can be achieved through weight shifting that can be done by fixing rails,perpendicular to the line of motion but in its plane, on which the weight can be 
made to move through an electric motor . But this is not a very efficient approach because once we approach nearer to the balancing point we'll have to shift weights more rapidly , i.e. the response time should be good which cannot be done through 
weight-rail mechanism . Also in the weight-rail mechanism there is significant 
amount of jerks when the weights suddenly change their direction of motion.</h4><h3></h3><h3></h3><h3></h3><h3></h3><h3></h3><h3></h3><h3></h3><h3>For the sake of simplicity , we choose the first design i.e , <strong>Flywheel mechanism </strong>(that will be attached to high torque dc motor (mostly johnson)). that we were going to implement in our bot .</h3><h3></h3><h3><strong><br></strong></h3><h3><strong><br></strong></h3><h3><strong>Tilting : </strong></h3><h4>Tilt sensing is the crux of this project . We started off thinking that an <strong>accelerometer (generally used ADXL335 )</strong>would
be sufficient to measure angle as we can measure the direction of gravity w.r.t the  accelerometer and get the
tilt angle w.r.t the vertical. This approach is correct, but only for slow
angular velocities, at high angular velocities the accelerometer tilt angle
begins to lag  giving wrong tilt data. </h4><h4>
Then we changed our line of thought and decided to choose a <strong>Gyro sensor</strong> that
would measure angular velocity and angle can be found by integrating but this
approach fails at slow angular velocities due to gyroscopic drift(small errors
in slow velocities integrate and accumulate into a big error ).</h4><h4>So finally , we learnt that we can use  the <strong>complementary filter</strong> , the easiest one but not the best one (the best one - <strong>kalman</strong> <strong>filter</strong> but having very complex mathematical calculations)</h4><h4>to minimize the gyro and accelerometer errors. </h4><h3><strong><br></strong>
<p><img src="C:\Users\anurag\Desktop\2.png"></p></h3><h3><strong><br></strong></h3><h3><strong>Steering and propulsion system :</strong></h3><h4>Servo motor is planning to be used for steering the bot  and for driving the system , a common dc motor is used to drive the rear wheel using the gear - belt mechanism.</h4><h4>Both these motors will be controlled through remote(works as a transmitter ) by using a  R F circuit (works as a receiver).</h4><h3><strong><br></strong></h3><h3><strong><br></strong></h3><h3><strong>Microcontroller : </strong></h3><h4>Planning to use the common one of arduino product : <strong>Arduino Duemilanove </strong>.</h4><h4>A PID control will be used to  calculate the counter torque by determining  the tilting angle  that should be given to flywheel to counter balance the gravity torque and bot would come to its upright position.</h4><h4>The code will be processed in the microcontroller and the motor is controller through it via motor driver(generally L293 d ).</h4><h4></h4><h4></h4><h4></h4><h4><strong> </strong></h4><h4><strong>          </strong></h4><h4><strong style="color: inherit; font-family: inherit; font-style: inherit; font-variant: inherit;">Mostly , The final working model bicycle will do the following:</strong></h4><h4>         Be capable of driving and accelerating without falling over. </h4><h4>        Be durable enough to withstand impacts of falling over from rest.</h4><h4><strong>
Size and Weight:</strong></h4><h4>        The final model will weigh less than 1 kg. </h4><h4>         The final model will measure less than 0.5 m in length. </h4><h4><strong>Control and Operation:</strong></h4><h4>          The balancing will be controlled automatically by arduino (mostly dumenilanove).</h4><h4> <strong> If time permits , after the achieving of the balancing , we would like to work on the following :</strong></h4><h4>           Starting and stopping will be remotely human-controlled .</h4><h4>            The speed of the bicycle will be  remotely human-controlled .</h4><p><img src="C:\Users\anurag\Desktop\2.png"></p><p><a href="https://www.facebook.com/photo.php?fbid=720944014631225&amp;set=gm.1616824528543237&amp;type=1&amp;theater"></a><a href="C:\Users\anurag\Desktop\2.png" target="_blank"></a></p><h3> </h3><p><img src="https://fbcdn-sphotos-f-a.akamaihd.net/hphotos-ak-prn1/t1.0-9/10155858_775603745785905_954071363_n.png"></p>