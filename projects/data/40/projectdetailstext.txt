<p><strong>           1) Installing OpenCV and winAVR:-</strong></p><p style="margin-left: 40px;"><strong></strong>First we tried to install Opencv using ms visual studio and codeblocks in Windows, but got a lot of errors related to library files of opencv. So, we used Ubuntu, then OpenCV worked well. winAVR was installed but had few driver errors . By installing some drivers we removed the error and successfully ran an led code on atmega-128 board.           <strong>2) 2) 2) Purchasing electronic components:-</strong></p><p style="margin-left: 40px;"><strong></strong>We purchased basic components to start with such as Atmega 128, programmer, web camera, etc.</p><p style="margin-left: 40px;"><strong>3) Some progress:-</strong></p><p style="margin-left: 40px;">By the end of first week, we used basic image processing codes such as coloured to grayscale conversion, binary image, and some basic functions. We designed first solidworks structure but it was not good for the functioning we expected from robot.<strong></strong></p><p style="margin-left: 40px;">We learned some Atmega functions and understood the mechanisms to convert rotation into translation such as rack and pinion, ball and screw, conveyor belt, etc.</p><p style="margin-left: 40px;">We understood the algorithm of driving a stepper motor.</p><p style="margin-left: 40px;"><strong>4) Text detection:-</strong></p><p style="margin-left: 40px;"><strong>T</strong>o detect text in image we tried some codes like contour detection, edge detection, etc. Text is detected by sudden change in the intensity of pixels w.r.t. background.</p><p style="margin-left: 40px;">We cropped the detected text from image.</p><p style="margin-left: 40px;"><strong>5)Prototype I:-</strong></p><p style="margin-left: 40px;"><strong>I</strong>nitially we had decided to use nut and screw mechanism for vertical motion and conveyor belt for horizontal motion. We also constructed a prototype with such design. But it had lots of problems related with fixing of camera and motion of conveyor belt. </p><p style="margin-left: 40px;"><strong>6) Few changes:-</strong></p><p style="margin-left: 40px;"><strong>We</strong> changed the mechanism from conveyor belt to rack and pinion due to its fast and accurate motion. We designed robot using rack and pinion for horizontal motion. We also modified the image processing to be able to read only top line in the captured image. In order to get in flow while reading the document.</p><p style="margin-left: 40px;"><strong>7) Final Design and Atmega code:-</strong></p><p style="margin-left: 40px;"><strong>F</strong>inally we used drawer sliders to slide along horizontal as well as vertical direction. We constructed the final mechanical structure. There were many issues related to stepper motor. But they were removed and we made final ATMEGA code to run stepper and dc motor finally getting the proper motion of camera.</p><p style="margin-left: 40px;"><strong>8) Text reading:-</strong></p><p style="margin-left: 40px;"><strong>W</strong>e changed our way of reading from reading top line each time to reading complete page after it is completely captured. We basically, divided the available space into       15 parts and captured image by moving camera to each of these parts. There were some errors related with connecting the images. So, we cropped and shifted images to minimize errors. We used tesseract ocr to extract text from image and espeak to read it. Since, these both softwares allow different languages, we were able to read different language texts.</p><p style="margin-left: 40px;"><strong>9) Translation:-</strong></p><p style="margin-left: 40px;"><strong></strong>Since, we made each code in Ubuntu, we needed to use translation in ubuntu. We coded a command to make the laptop type the text in Google Translate and translate it to required language and again store output into another text file. Since, tesseract and espeak allowed some languages, it became multilingual reading robot.  </p><p style="margin-left: 40px;"></p><p style="margin-left: 40px;"></p><p style="margin-left: 20px;"></p>